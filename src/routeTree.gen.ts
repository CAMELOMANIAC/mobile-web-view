/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as isLoginRouteImport } from './routes/(isLogin)/route'
import { Route as isLoginIndexImport } from './routes/(isLogin)/index'
import { Route as isLoginLoginImport } from './routes/(isLogin)/login'
import { Route as isLoginAboutImport } from './routes/(isLogin)/about'
import { Route as isLoginScheduleIndexImport } from './routes/(isLogin)/schedule/index'
import { Route as isLoginEmployeeIndexImport } from './routes/(isLogin)/employee/index'
import { Route as isLoginEmployeeEmployeeIdImport } from './routes/(isLogin)/employee/$employeeId'

// Create/Update Routes

const isLoginRouteRoute = isLoginRouteImport.update({
  id: '/(isLogin)',
  getParentRoute: () => rootRoute,
} as any)

const isLoginIndexRoute = isLoginIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => isLoginRouteRoute,
} as any)

const isLoginLoginRoute = isLoginLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => isLoginRouteRoute,
} as any)

const isLoginAboutRoute = isLoginAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => isLoginRouteRoute,
} as any)

const isLoginScheduleIndexRoute = isLoginScheduleIndexImport.update({
  id: '/schedule/',
  path: '/schedule/',
  getParentRoute: () => isLoginRouteRoute,
} as any)

const isLoginEmployeeIndexRoute = isLoginEmployeeIndexImport.update({
  id: '/employee/',
  path: '/employee/',
  getParentRoute: () => isLoginRouteRoute,
} as any)

const isLoginEmployeeEmployeeIdRoute = isLoginEmployeeEmployeeIdImport.update({
  id: '/employee/$employeeId',
  path: '/employee/$employeeId',
  getParentRoute: () => isLoginRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(isLogin)': {
      id: '/(isLogin)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof isLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/(isLogin)/about': {
      id: '/(isLogin)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof isLoginAboutImport
      parentRoute: typeof isLoginRouteImport
    }
    '/(isLogin)/login': {
      id: '/(isLogin)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof isLoginLoginImport
      parentRoute: typeof isLoginRouteImport
    }
    '/(isLogin)/': {
      id: '/(isLogin)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof isLoginIndexImport
      parentRoute: typeof isLoginRouteImport
    }
    '/(isLogin)/employee/$employeeId': {
      id: '/(isLogin)/employee/$employeeId'
      path: '/employee/$employeeId'
      fullPath: '/employee/$employeeId'
      preLoaderRoute: typeof isLoginEmployeeEmployeeIdImport
      parentRoute: typeof isLoginRouteImport
    }
    '/(isLogin)/employee/': {
      id: '/(isLogin)/employee/'
      path: '/employee'
      fullPath: '/employee'
      preLoaderRoute: typeof isLoginEmployeeIndexImport
      parentRoute: typeof isLoginRouteImport
    }
    '/(isLogin)/schedule/': {
      id: '/(isLogin)/schedule/'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof isLoginScheduleIndexImport
      parentRoute: typeof isLoginRouteImport
    }
  }
}

// Create and export the route tree

interface isLoginRouteRouteChildren {
  isLoginAboutRoute: typeof isLoginAboutRoute
  isLoginLoginRoute: typeof isLoginLoginRoute
  isLoginIndexRoute: typeof isLoginIndexRoute
  isLoginEmployeeEmployeeIdRoute: typeof isLoginEmployeeEmployeeIdRoute
  isLoginEmployeeIndexRoute: typeof isLoginEmployeeIndexRoute
  isLoginScheduleIndexRoute: typeof isLoginScheduleIndexRoute
}

const isLoginRouteRouteChildren: isLoginRouteRouteChildren = {
  isLoginAboutRoute: isLoginAboutRoute,
  isLoginLoginRoute: isLoginLoginRoute,
  isLoginIndexRoute: isLoginIndexRoute,
  isLoginEmployeeEmployeeIdRoute: isLoginEmployeeEmployeeIdRoute,
  isLoginEmployeeIndexRoute: isLoginEmployeeIndexRoute,
  isLoginScheduleIndexRoute: isLoginScheduleIndexRoute,
}

const isLoginRouteRouteWithChildren = isLoginRouteRoute._addFileChildren(
  isLoginRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof isLoginIndexRoute
  '/about': typeof isLoginAboutRoute
  '/login': typeof isLoginLoginRoute
  '/employee/$employeeId': typeof isLoginEmployeeEmployeeIdRoute
  '/employee': typeof isLoginEmployeeIndexRoute
  '/schedule': typeof isLoginScheduleIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof isLoginAboutRoute
  '/login': typeof isLoginLoginRoute
  '/': typeof isLoginIndexRoute
  '/employee/$employeeId': typeof isLoginEmployeeEmployeeIdRoute
  '/employee': typeof isLoginEmployeeIndexRoute
  '/schedule': typeof isLoginScheduleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(isLogin)': typeof isLoginRouteRouteWithChildren
  '/(isLogin)/about': typeof isLoginAboutRoute
  '/(isLogin)/login': typeof isLoginLoginRoute
  '/(isLogin)/': typeof isLoginIndexRoute
  '/(isLogin)/employee/$employeeId': typeof isLoginEmployeeEmployeeIdRoute
  '/(isLogin)/employee/': typeof isLoginEmployeeIndexRoute
  '/(isLogin)/schedule/': typeof isLoginScheduleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/employee/$employeeId'
    | '/employee'
    | '/schedule'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/login'
    | '/'
    | '/employee/$employeeId'
    | '/employee'
    | '/schedule'
  id:
    | '__root__'
    | '/(isLogin)'
    | '/(isLogin)/about'
    | '/(isLogin)/login'
    | '/(isLogin)/'
    | '/(isLogin)/employee/$employeeId'
    | '/(isLogin)/employee/'
    | '/(isLogin)/schedule/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  isLoginRouteRoute: typeof isLoginRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  isLoginRouteRoute: isLoginRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(isLogin)"
      ]
    },
    "/(isLogin)": {
      "filePath": "(isLogin)/route.tsx",
      "children": [
        "/(isLogin)/about",
        "/(isLogin)/login",
        "/(isLogin)/",
        "/(isLogin)/employee/$employeeId",
        "/(isLogin)/employee/",
        "/(isLogin)/schedule/"
      ]
    },
    "/(isLogin)/about": {
      "filePath": "(isLogin)/about.tsx",
      "parent": "/(isLogin)"
    },
    "/(isLogin)/login": {
      "filePath": "(isLogin)/login.tsx",
      "parent": "/(isLogin)"
    },
    "/(isLogin)/": {
      "filePath": "(isLogin)/index.tsx",
      "parent": "/(isLogin)"
    },
    "/(isLogin)/employee/$employeeId": {
      "filePath": "(isLogin)/employee/$employeeId.tsx",
      "parent": "/(isLogin)"
    },
    "/(isLogin)/employee/": {
      "filePath": "(isLogin)/employee/index.tsx",
      "parent": "/(isLogin)"
    },
    "/(isLogin)/schedule/": {
      "filePath": "(isLogin)/schedule/index.tsx",
      "parent": "/(isLogin)"
    }
  }
}
ROUTE_MANIFEST_END */
